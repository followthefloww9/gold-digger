# Gold Digger AI Bot - Environment Variables Template
# Copy this file to .env and fill in your actual values

# ===== GOOGLE GEMINI API (CRITICAL: Use NEW SDK) =====
# Get your API key from: https://ai.google.dev/
GEMINI_API_KEY=AIzaSyBJntGV4yAroxpQb4EPXPlLio1FEegblm4

# ===== IC MARKETS DEMO ACCOUNT =====
# Set up your demo account at: https://www.icmarkets.com/global/en/open-trading-account/demo
MT5_LOGIN=your_demo_account_login_number
MT5_PASSWORD=your_demo_account_password
MT5_SERVER=ICMarkets-Demo

# ===== TRADING CONFIGURATION =====
# Symbol to trade (default: Gold)
TRADING_SYMBOL=XAUUSD

# Risk management settings
MAX_DAILY_LOSS=500.00          # Maximum daily loss in account currency
RISK_PER_TRADE=0.01            # Risk 1% per trade
MAX_POSITIONS=3                # Maximum concurrent positions

# Trading sessions (UTC times)
LONDON_SESSION_START=08:00
LONDON_SESSION_END=16:00
NY_SESSION_START=13:00
NY_SESSION_END=21:00

# ===== OPTIONAL: NOTIFICATIONS =====
# Discord webhook for trade alerts
DISCORD_WEBHOOK=https://discord.com/api/webhooks/your_webhook_url

# Telegram bot for notifications
TELEGRAM_BOT_TOKEN=your_telegram_bot_token
TELEGRAM_CHAT_ID=your_telegram_chat_id

# Email notifications (SMTP)
EMAIL_SMTP_SERVER=smtp.gmail.com
EMAIL_SMTP_PORT=587
EMAIL_USERNAME=your_email@gmail.com
EMAIL_PASSWORD=your_app_password
EMAIL_TO=alerts@yourdomain.com

# ===== DEVELOPMENT SETTINGS =====
# Logging level (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# Database URL (SQLite for development, PostgreSQL for production)
DATABASE_URL=sqlite:///gold_digger.db

# Streamlit configuration
STREAMLIT_PORT=8501
STREAMLIT_HOST=localhost

# ===== ADVANCED SETTINGS =====
# AI decision confidence threshold (0.0 - 1.0)
MIN_CONFIDENCE_THRESHOLD=0.75

# Backtesting settings
BACKTEST_START_DATE=2024-01-01
BACKTEST_END_DATE=2024-12-31

# API rate limiting
GEMINI_REQUESTS_PER_MINUTE=60
MT5_RECONNECT_ATTEMPTS=3

# ===== SECURITY =====
# Encryption key for sensitive data (generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())")
ENCRYPTION_KEY=your_encryption_key_here
